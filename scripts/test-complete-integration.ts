import { slackWebhookService } from '@/lib/services/slack-webhook-service'

async function testCompleteIntegration() {
  console.log('üéâ Testing Complete AI Cost Guardian Integration...\n')

  // Test 1: Cost alert
  console.log('1Ô∏è‚É£ Testing cost threshold alert...')
  const costAlert = await slackWebhookService.sendCostAlert(127.50, 150.00, 'OpenAI')
  console.log(costAlert ? '‚úÖ Cost alert sent!' : '‚ùå Cost alert failed')

  // Test 2: Member activation
  console.log('\n2Ô∏è‚É£ Testing member activation notification...')
  const memberAlert = await slackWebhookService.sendMemberActivation(
    'newuser@example.com',
    'User',
    'AI Cost Guardian Demo'
  )
  console.log(memberAlert ? '‚úÖ Member activation sent!' : '‚ùå Member activation failed')

  // Test 3: High usage alert
  console.log('\n3Ô∏è‚É£ Testing high usage alert...')
  const usageAlert = await slackWebhookService.sendHighUsageAlert(
    'poweruser@example.com',
    25000,
    4.75,
    'Claude',
    'Claude-3-Sonnet'
  )
  console.log(usageAlert ? '‚úÖ High usage alert sent!' : '‚ùå High usage alert failed')

  // Test 4: Weekly report
  console.log('\n4Ô∏è‚É£ Testing weekly cost report...')
  const weeklyReport = await slackWebhookService.sendWeeklyCostReport(
    487.32,
    { name: 'OpenAI', cost: 287.15 },
    [
      'OpenAI usage increased 15% this week',
      'Peak usage occurs between 2-4 PM',
      'Code generation tasks show highest token consumption'
    ]
  )
  console.log(weeklyReport ? '‚úÖ Weekly report sent!' : '‚ùå Weekly report failed')

  // Test 5: System completion notification
  console.log('\n5Ô∏è‚É£ Sending system completion notification...')
  const completionAlert = await slackWebhookService.sendBulkActivationSummary(25, 8)
  console.log(completionAlert ? '‚úÖ Completion notification sent!' : '‚ùå Completion notification failed')

  // Test 6: Custom event notification
  console.log('\n6Ô∏è‚É£ Testing custom event notification...')
  const customEvent = await slackWebhookService.sendEventNotification('INTEGRATION_COMPLETE', {
    title: 'üöÄ AI Cost Guardian Integration Complete',
    message: '*Congratulations!* Your AI Cost Guardian platform is now fully operational with real-time Slack notifications.\n\n*Features Active:*\n‚Ä¢ Member activation system (25/25 users activated)\n‚Ä¢ Real-time cost monitoring and alerts\n‚Ä¢ High usage detection and warnings\n‚Ä¢ Weekly reporting and insights\n‚Ä¢ Team collaboration notifications\n‚Ä¢ System health monitoring',
    context: {
      totalUsers: 25,
      activationRate: '100%',
      notificationTypes: 29,
      integrationStatus: 'LIVE'
    }
  })
  console.log(customEvent ? '‚úÖ Custom event sent!' : '‚ùå Custom event failed')

  console.log('\nüéØ Complete Integration Test Results:')
  console.log('====================================')
  console.log(`Cost Alerts: ${costAlert ? '‚úÖ' : '‚ùå'}`)
  console.log(`Member Notifications: ${memberAlert ? '‚úÖ' : '‚ùå'}`)
  console.log(`Usage Monitoring: ${usageAlert ? '‚úÖ' : '‚ùå'}`)
  console.log(`Weekly Reports: ${weeklyReport ? '‚úÖ' : '‚ùå'}`)
  console.log(`System Updates: ${completionAlert ? '‚úÖ' : '‚ùå'}`)
  console.log(`Custom Events: ${customEvent ? '‚úÖ' : '‚ùå'}`)

  const allSuccess = costAlert && memberAlert && usageAlert && weeklyReport && completionAlert && customEvent

  console.log('\n' + (allSuccess ? 'üéâ ALL TESTS PASSED!' : '‚ö†Ô∏è Some tests failed'))
  console.log('\nüì± Check your Slack workspace for 6 beautiful notification messages!')
  console.log('\nüöÄ Your AI Cost Guardian is now FULLY OPERATIONAL with enterprise-grade Slack integration!')
}

testCompleteIntegration().catch(console.error)