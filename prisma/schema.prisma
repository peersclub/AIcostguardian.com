// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  company       String?
  role          UserRole  @default(USER)
  isSuperAdmin  Boolean   @default(false) // Super admin flag for platform management
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastActiveAt  DateTime? // Track user activity
  invitedBy     String?   // Track who invited the user
  invitedAt     DateTime? // When the user was invited
  acceptedAt    DateTime? // When the invitation was accepted
  jobTitle      String?   // Job title

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  department     Department?   @relation("DepartmentUsers", fields: [departmentId], references: [id])
  departmentId   String?
  managedDepartments Department[] @relation("DepartmentManager")
  
  accounts              Account[]
  apiKeys               ApiKey[]
  usageLogs             UsageLog[]
  usage                 Usage[]
  alerts                Alert[]
  sessions              Session[]
  notificationRules     NotificationRule[]
  notifications         Notification[]
  notificationPreferences NotificationPreferences?
  conversations         Conversation[]
  threads               Thread[]
  messages              Message[]
  threadParticipants    ThreadParticipant[]
  attachments           Attachment[]
  aiThreads             AIThread[]
  promptPreferences     PromptPreference[]
  modelOverrides        ModelOverride[]
  messageFeedbacks      MessageFeedbackRecord[]
  threadCollaborations  ThreadCollaborator[]
  invitedCollaborators  ThreadCollaborator[] @relation("InvitedCollaborators")
  userSettings          UserSettings?
  voiceSessions         VoiceSession[]
  imageUploads          ImageUpload[]
  usageLimit            UsageLimit?
  threadPresences       ThreadPresence[]
  modelPerformance      ModelPerformance[]
  budgets               Budget[]
  costPredictions       CostPrediction[]
  auditLogs             AuditLog[]
  roles                 Role[]       @relation("UserRoles")
  alertRules            AlertRule[]
  preferences           UserPreferences?
  editedThreadContexts  ThreadContext[] @relation("ThreadContextEditor")
  adminOverrides        OrganizationSettings[] @relation("AdminOverrides")

  // Messaging system relationships
  createdChannels       MessagingChannel[] @relation("ChannelCreator")
  channelMemberships    ChannelMember[] @relation("ChannelMemberships")
  sentMessages          MessagingMessage[] @relation("SentMessages")
  receivedMessages      MessagingMessage[] @relation("ReceivedMessages")
  messageReactions      MessageReaction[] @relation("MessageReactions")
  messageDeliveries     MessageDeliveryStatus[] @relation("MessageDeliveries")
  dmThreadsAsParticipant1 DirectMessageThread[] @relation("DMParticipant1")
  dmThreadsAsParticipant2 DirectMessageThread[] @relation("DMParticipant2")

  // New Slack-like feature relationships
  drafts                MessageDraft[]
  contextMemories       AIContextMemory[]
  starredThreads        UserStarredThread[]
  threadReplies         ThreadReply[]       @relation("ThreadReplies")
  replyReactions        ReplyReaction[]     @relation("ReplyReactions")
  createdHuddles        Huddle[]            @relation("CreatedHuddles")
  huddleParticipations  HuddleParticipant[] @relation("HuddleParticipants")
}

model Organization {
  id            String    @id @default(cuid())
  name          String
  domain        String    @unique
  subscription  SubscriptionTier @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true) // Can disable organizations
  
  // Enterprise fields
  industry      String?   // Industry type
  size          String?   // Company size (e.g., "1-50", "51-200", etc.)
  website       String?   // Company website
  description   String?   @db.Text
  logo          String?   // Logo URL
  primaryColor  String?   // Brand color
  
  // Contact information
  contactEmail  String?
  contactPhone  String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  
  // Settings
  allowedProviders String[] @default([]) // AI providers this org can use
  maxUsers         Int?     // Maximum users allowed
  maxApiKeys       Int?     // Maximum API keys per user
  requireMFA       Boolean  @default(false) // Require 2FA for all users
  
  // Billing
  billingEmail     String?
  billingCycle     String   @default("monthly") // monthly, yearly
  nextBillingDate  DateTime?
  invoiceFrequency String?  @default("monthly") // Added for settings API
  paymentMethod    String?  @default("card") // Added for settings API
  spendingLimit    Float?   // Already exists
  alertThreshold   Float?   @default(80) // Added for settings API
  
  // Team Settings
  allowInvites     Boolean  @default(true) // Added for settings API
  defaultRole      String   @default("viewer") // Added for settings API
  requireApproval  Boolean  @default(true) // Added for settings API
  maxMembers       Int?     @default(10) // Added for settings API
  apiRateLimit     Int?     @default(1000) // Added for settings API
  
  users             User[]
  departments       Department[]
  apiKeys           ApiKey[]
  usageLogs         UsageLog[]
  monthlySpend      Float     @default(0)
  spendLimit        Float?
  notificationRules NotificationRule[]
  notifications     Notification[]
  budgets           Budget[]
  costPredictions   CostPrediction[]
  aiThreads         AIThread[]
  usageLimit        UsageLimit?
  invitations       Invitation[]
  memberLimits      MemberLimit[]
  roles             Role[]
  permissions       Permission[]
  alertRules        AlertRule[]
  activeAlerts      ActiveAlert[]
  threads           Thread[]
  settings          OrganizationSettings?
  messagingChannels MessagingChannel[]
  directMessageThreads DirectMessageThread[]
  integrationConfigs IntegrationConfig[]
  contextMemories   AIContextMemory[]
}

model Department {
  id            String    @id @default(cuid())
  name          String    // Department name (e.g., "C-Suite", "Marketing", "Tech")
  description   String?   @db.Text
  slug          String    @unique // URL-friendly identifier
  color         String?   // Department color for UI
  icon          String?   // Icon identifier
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)

  // Budget and limits
  monthlyBudget Float?    // Department-specific budget
  spendingLimit Float?    // Department spending limit

  // Department head/manager
  managerId     String?   // User ID of department manager
  manager       User?     @relation("DepartmentManager", fields: [managerId], references: [id])

  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  users          User[]    @relation("DepartmentUsers")
  usageLogs      UsageLog[] @relation("DepartmentUsage")
  budgets        Budget[]  @relation("DepartmentBudgets")

  @@unique([organizationId, slug])
  @@index([organizationId])
}

model UserPreferences {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  
  // General Settings
  theme                   String    @default("dark")
  language                String    @default("en")
  timezone                String    @default("UTC")
  dateFormat              String?   @default("MM/DD/YYYY")
  currency                String?   @default("USD")
  
  // Notification Settings
  emailNotifications      Boolean   @default(true)
  pushNotifications       Boolean   @default(false)
  smsNotifications        Boolean   @default(false)
  notificationFrequency   String?   @default("realtime")
  digestTime              String?   @default("09:00")
  
  // Security Settings
  twoFactorEnabled        Boolean   @default(false)
  sessionTimeout          Int?      @default(30)
  ipWhitelist             String[]  @default([])
  
  // AI Settings
  defaultModel            String    @default("gpt-4o-mini")
  autoOptimize            Boolean   @default(true)
  streamResponses         Boolean   @default(true)
  saveHistory             Boolean   @default(true)
  contextWindow           Int?      @default(8000)
  temperature             Float?    @default(0.7)
  maxTokens               Int?      @default(4000)
  
  // Advanced Settings
  debugMode               Boolean   @default(false)
  telemetry               Boolean   @default(true)
  betaFeatures            Boolean   @default(false)
  customEndpoint          String?
  webhookUrl              String?
  
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id            String    @id @default(cuid())
  provider      String    // openai, claude, gemini, etc.
  encryptedKey  String
  lastUsed      DateTime?
  lastTested    DateTime? // Track when the key was last tested
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  
  @@unique([userId, provider])
  @@index([organizationId, provider, isActive]) // For org-wide key lookups
  @@index([lastUsed]) // For cleanup queries
}

model UsageLog {
  id            String    @id @default(cuid())
  provider      String
  model         String
  promptTokens  Int
  completionTokens Int
  totalTokens   Int
  cost          Float
  timestamp     DateTime  @default(now())
  metadata      Json?
  
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  department    Department? @relation("DepartmentUsage", fields: [departmentId], references: [id])
  departmentId  String?

  chatMessage   ChatMessage?
  
  @@index([userId, timestamp])
  @@index([organizationId, timestamp])
  @@index([provider, model, timestamp]) // For analytics queries
}

model Usage {
  id            String    @id @default(cuid())
  provider      String
  model         String
  inputTokens   Int       @default(0)
  outputTokens  Int       @default(0)
  totalTokens   Int       @default(0)
  cost          Float     @default(0)
  requestId     String?
  timestamp     DateTime  @default(now())
  metadata      Json      @default("{}")
  
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  
  @@index([userId, timestamp])
  @@index([provider, timestamp])
}

model Alert {
  id            String    @id @default(cuid())
  type          String
  provider      String
  threshold     Float     @default(0)
  message       String
  metadata      Json      @default("{}")
  isActive      Boolean   @default(true)
  triggeredAt   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  user          User      @relation(fields: [userId], references: [id])
  userId        String
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Enterprise Management Models
model Invitation {
  id             String   @id @default(cuid())
  email          String
  role           UserRole @default(USER)
  organizationId String
  invitedBy      String
  token          String   @unique
  expiresAt      DateTime
  acceptedAt     DateTime?
  createdAt      DateTime @default(now())
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@index([email])
  @@index([token])
  @@index([organizationId])
}

model MemberLimit {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  
  // Limits per user in organization
  dailyTokenLimit   Int?
  monthlyTokenLimit Int?
  dailyCostLimit    Float?
  monthlyCostLimit  Float?
  allowedProviders  String[] // Specific providers this user can access
  allowedModels     String[] // Specific models this user can use
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  organization   Organization @relation(fields: [organizationId], references: [id])
  
  @@unique([organizationId, userId])
  @@index([userId])
}

enum UserRole {
  SUPER_ADMIN // Platform super admin
  ADMIN       // Organization admin
  MANAGER     // Can manage team members
  USER        // Regular user
  VIEWER      // Read-only access
}

enum SubscriptionTier {
  FREE
  STARTER
  GROWTH
  SCALE
  ENTERPRISE
}

enum AlertType {
  SPEND_THRESHOLD
  USAGE_SPIKE
  RATE_LIMIT
  ERROR_RATE
}

// Notification System Models
model NotificationRule {
  id                String   @id @default(cuid())
  userId           String
  organizationId   String
  name             String
  description      String?
  type             NotificationType
  enabled          Boolean  @default(true)
  
  // Conditions
  conditions       Json     // Complex condition logic
  threshold        Float?   // For numeric thresholds
  comparisonOp     String?  // gt, gte, lt, lte, eq
  timeWindow       Int?     // Minutes for time-based rules
  
  // Scheduling
  schedule         String?  // Cron expression for scheduled notifications
  timezone         String   @default("UTC")
  
  // Throttling
  cooldownMinutes  Int      @default(60)
  maxPerDay        Int      @default(10)
  lastTriggeredAt  DateTime?
  triggerCount     Int      @default(0)
  
  // Metadata
  priority         NotificationPriority @default(MEDIUM)
  tags             String[]
  metadata         Json?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])
  channels         NotificationChannel[]
  notifications    Notification[]
  
  @@index([userId, enabled])
  @@index([organizationId, type])
}

model NotificationChannel {
  id               String   @id @default(cuid())
  ruleId           String
  type             ChannelType
  
  // Channel-specific config
  destination      String   // email address, phone, webhook URL, etc.
  config           Json?    // Channel-specific settings
  
  // Delivery preferences
  enabled          Boolean  @default(true)
  includeDetails   Boolean  @default(true)
  format           String   @default("html") // html, text, markdown
  
  rule             NotificationRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  @@unique([ruleId, type, destination])
}

model Notification {
  id               String   @id @default(cuid())
  ruleId           String?
  userId           String
  organizationId   String
  
  type             NotificationType
  priority         NotificationPriority
  title            String
  message          String   @db.Text
  data             Json?    // Additional context data
  
  // Delivery status
  status           NotificationStatus @default(PENDING)
  channels         Json     // Track delivery per channel
  attempts         Int      @default(0)
  lastAttemptAt    DateTime?
  deliveredAt      DateTime?
  readAt           DateTime?
  acknowledgedAt   DateTime?
  
  // Error tracking
  error            String?
  errorDetails     Json?
  
  // Grouping
  groupId          String?  // For grouping related notifications
  parentId         String?  // For threaded notifications
  
  createdAt        DateTime @default(now())
  expiresAt        DateTime?
  
  user             User     @relation(fields: [userId], references: [id])
  organization     Organization @relation(fields: [organizationId], references: [id])
  rule             NotificationRule? @relation(fields: [ruleId], references: [id])
  
  @@index([userId, status, createdAt])
  @@index([organizationId, type, createdAt])
  @@index([groupId])
  @@index([userId, readAt]) // For unread notifications queries
}

model NotificationPreferences {
  id               String   @id @default(cuid())
  userId           String   @unique
  
  // Global settings
  emailEnabled     Boolean  @default(true)
  smsEnabled       Boolean  @default(false)
  pushEnabled      Boolean  @default(true)
  inAppEnabled     Boolean  @default(true)
  slackEnabled     Boolean  @default(false)
  teamsEnabled     Boolean  @default(false)
  
  // Quiet hours
  quietHoursEnabled Boolean @default(false)
  quietHoursStart  String?  // "22:00"
  quietHoursEnd    String?  // "08:00"
  timezone         String   @default("UTC")
  weekendQuiet     Boolean  @default(false)
  
  // Batching preferences
  batchEmails      Boolean  @default(false)
  batchFrequency   String   @default("daily") // immediate, hourly, daily
  nextBatchAt      DateTime?
  
  // Channel-specific settings
  emailDigest      Boolean  @default(true)
  slackDM          Boolean  @default(false)
  preferredChannel ChannelType @default(EMAIL)
  
  // Notification categories opt-in/out
  costAlerts       Boolean  @default(true)
  usageAlerts      Boolean  @default(true)
  systemAlerts     Boolean  @default(true)
  teamAlerts       Boolean  @default(true)
  reports          Boolean  @default(true)
  recommendations  Boolean  @default(true)
  
  // Thresholds for auto-escalation
  autoEscalate     Boolean  @default(false)
  escalateAfterMinutes Int  @default(30)
  
  user             User     @relation(fields: [userId], references: [id])
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model NotificationTemplate {
  id               String   @id @default(cuid())
  name             String   @unique
  type             NotificationType
  channel          ChannelType
  
  // Template content
  subject          String?  // For email
  bodyTemplate     String   @db.Text
  bodyHtml         String?  @db.Text
  variables        Json     // Available variables for substitution
  
  // Customization
  locale           String   @default("en")
  brand            Json?    // Brand customization (colors, logo, etc.)
  
  isDefault        Boolean  @default(false)
  isActive         Boolean  @default(true)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@unique([type, channel, locale, isDefault])
  @@index([type, channel])
}

model NotificationLog {
  id               String   @id @default(cuid())
  notificationId   String
  channel          ChannelType
  status           String
  destination      String
  attemptNumber    Int
  requestData      Json?
  responseData     Json?
  error            String?
  latencyMs        Int?
  timestamp        DateTime @default(now())
  
  @@index([notificationId])
  @@index([timestamp])
}

// Enums for Notification System
enum NotificationType {
  // Cost Alerts
  COST_THRESHOLD_WARNING
  COST_THRESHOLD_CRITICAL
  COST_THRESHOLD_EXCEEDED
  DAILY_COST_SPIKE
  UNUSUAL_SPENDING_PATTERN
  
  // Usage Alerts
  API_RATE_LIMIT_WARNING
  API_RATE_LIMIT_EXCEEDED
  USAGE_QUOTA_WARNING
  USAGE_QUOTA_EXCEEDED
  MODEL_DEPRECATION
  
  // System Events
  API_KEY_EXPIRING
  API_KEY_EXPIRED
  PROVIDER_OUTAGE
  INTEGRATION_FAILURE
  PAYMENT_FAILED
  SUBSCRIPTION_EXPIRING
  
  // Team Events  
  NEW_TEAM_MEMBER
  MEMBER_EXCEEDED_LIMIT
  SUSPICIOUS_ACTIVITY
  
  // Reports
  WEEKLY_COST_REPORT
  MONTHLY_COST_REPORT
  OPTIMIZATION_RECOMMENDATIONS
}

enum ChannelType {
  EMAIL
  SMS
  SLACK
  TEAMS
  WEBHOOK
  IN_APP
  PUSH
  PAGERDUTY
}

enum NotificationStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
  EXPIRED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Budget {
  id              String   @id @default(cuid())
  userId          String?  // Optional user-specific budget
  organizationId  String?  // Optional org-wide budget
  departmentId    String?  // Optional department-specific budget
  name            String
  amount          Float
  spent           Float    @default(0)
  period          BudgetPeriod
  startDate       DateTime
  endDate         DateTime?
  isActive        Boolean  @default(true)
  alertThreshold  Float    @default(0.8)
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User?    @relation(fields: [userId], references: [id])
  organization    Organization? @relation(fields: [organizationId], references: [id])
  department      Department? @relation("DepartmentBudgets", fields: [departmentId], references: [id])
  
  @@index([organizationId, isActive])
  @@index([userId, isActive])
}

enum BudgetPeriod {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model Conversation {
  id              String   @id @default(cuid())
  userId          String
  title           String
  model           String?
  provider        String?
  totalCost       Float    @default(0)
  totalTokens     Int      @default(0)
  messageCount    Int      @default(0)
  isActive        Boolean  @default(true)
  lastMessageAt   DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  metadata        Json?
  
  user            User     @relation(fields: [userId], references: [id])
  messages        ChatMessage[]
  
  @@index([userId, isActive])
  @@index([userId, lastMessageAt])
}

model ChatMessage {
  id              String   @id @default(cuid())
  conversationId  String
  role            String   // 'user' or 'assistant'
  content         String   @db.Text
  model           String?
  provider        String?
  promptTokens    Int      @default(0)
  completionTokens Int     @default(0)
  totalTokens     Int      @default(0)
  cost            Float    @default(0)
  latency         Int?     // milliseconds
  usageLogId      String?  @unique
  createdAt       DateTime @default(now())
  metadata        Json?
  
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  usageLog        UsageLog?    @relation(fields: [usageLogId], references: [id])
  
  @@index([conversationId, createdAt])
}

// AIOptimise Models
model AIThread {
  id                String    @id @default(cuid())
  userId            String
  organizationId    String?
  title             String
  description       String?
  isArchived        Boolean   @default(false)
  isPinned          Boolean   @default(false)
  isStarred         Boolean   @default(false)  // New: For starring functionality
  threadType        ThreadType @default(STANDARD) // New: Thread categorization
  hasExternalUsers  Boolean   @default(false)     // New: External user tracking
  tags              String[]
  totalCost         Float     @default(0)
  totalTokens       Int       @default(0)
  messageCount      Int       @default(0)
  averageQuality    Float     @default(0)
  lastMessageAt     DateTime?
  sharedWithEmails  String[]
  shareExpiry       DateTime?
  shareId           String?   @unique
  metadata          Json?
  mode              ChatMode  @default(STANDARD)
  aiAbsorberMode    Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  organization      Organization? @relation(fields: [organizationId], references: [id])
  messages          AIMessage[]
  analytics         ThreadAnalytics?
  collaborators     ThreadCollaborator[]
  presences         ThreadPresence[]
  context           ThreadContext?
  drafts            MessageDraft[]
  memoryEntries     AIContextMemory[] @relation("SourceMemory")
  starredBy         UserStarredThread[] @relation("StarredThreads")

  // Slack-like feature relationships
  threadReplies     ThreadReply[]       @relation("ThreadReplies")
  huddle            Huddle?             @relation("HuddleThread")
  
  @@index([userId, isArchived])
  @@index([userId, lastMessageAt])
  @@index([shareId])
  @@index([organizationId])
  @@index([userId, isPinned, lastMessageAt]) // For dashboard queries
  @@index([userId, createdAt]) // For pagination
}

model AIMessage {
  id                String    @id @default(cuid())
  threadId          String
  role              MessageRole
  content           String    @db.Text
  files             Json?     // Array of file references
  images            Json?     // Array of image URLs/data
  voiceTranscript   String?   @db.Text
  voiceDuration     Int?      // milliseconds
  
  // Model selection data
  selectedModel     String?
  selectedProvider  String?
  recommendedModel  String?
  modelReason       String?
  overrideReason    String?
  wasOverridden     Boolean   @default(false)
  
  // Usage metrics
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
  totalTokens       Int       @default(0)
  cost              Float     @default(0)
  latency           Int?      // milliseconds
  streamingTime     Int?      // milliseconds
  
  // Quality metrics
  qualityScore      Float?
  feedback          MessageFeedback?
  rating            Int?      // 1-5 stars
  regenerateCount   Int       @default(0)
  
  // Processing status
  status            MessageStatus @default(SENT)
  errorMessage      String?
  retryCount        Int       @default(0)
  
  // AI Absorber mode tracking
  isAbsorbedMessage Boolean   @default(false)
  
  // References
  parentMessageId   String?
  usageLogId        String?   @unique
  editedAt          DateTime?
  createdAt         DateTime  @default(now())
  metadata          Json?
  
  thread            AIThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  analysis          PromptAnalysis?
  feedbacks         MessageFeedbackRecord[]
  
  @@index([threadId, createdAt])
  @@index([threadId, role])
  @@index([status])
}

model PromptAnalysis {
  id                String    @id @default(cuid())
  messageId         String    @unique
  
  // Complexity metrics
  complexity        ComplexityLevel
  length            Int
  hasCode           Boolean   @default(false)
  hasImages         Boolean   @default(false)
  hasFiles          Boolean   @default(false)
  language          String    @default("en")
  
  // Content classification
  contentType       ContentType
  domain            String?   // coding, writing, analysis, etc
  techStack         String[]  // detected technologies
  requiredFeatures  String[]  // vision, tools, reasoning, etc
  
  // Model requirements
  minContextWindow  Int       @default(4096)
  requiredCapabilities String[]
  estimatedTokens   Int
  
  // Quality requirements
  accuracyNeeded    Float     // 0-1 score
  creativityNeeded  Float     // 0-1 score
  speedPriority     Float     // 0-1 score
  
  // Cost optimization
  budgetSensitivity Float     // 0-1 score
  qualityThreshold  Float     // minimum acceptable quality
  
  createdAt         DateTime  @default(now())
  
  message           AIMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model ModelSelection {
  id                String    @id @default(cuid())
  provider          String
  model             String
  
  // Scoring metrics
  qualityScore      Float
  costScore         Float
  speedScore        Float
  capabilityScore   Float
  totalScore        Float
  
  // Model capabilities
  contextWindow     Int
  supportedFeatures String[]
  inputCost         Float     // per 1k tokens
  outputCost        Float     // per 1k tokens
  avgLatency        Int       // milliseconds
  
  // Selection metadata
  selectionReason   String
  isRecommended     Boolean
  isOverride        Boolean   @default(false)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@unique([provider, model])
  @@index([totalScore])
}

model ModelOverride {
  id                String    @id @default(cuid())
  userId            String
  
  // Override context
  originalModel     String
  originalProvider  String
  overrideModel     String
  overrideProvider  String
  
  // Reasoning
  reason            String
  promptComplexity  ComplexityLevel
  contentType       ContentType
  
  // Performance tracking
  qualityImprovement Float?   // percentage
  costImpact        Float?    // percentage change
  speedImpact       Float?    // percentage change
  
  // Learning data
  wasSuccessful     Boolean?
  userFeedback      String?
  
  createdAt         DateTime  @default(now())
  
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId, createdAt])
  @@index([originalModel, overrideModel])
}

model PromptTemplate {
  id                String    @id @default(cuid())
  name              String
  description       String?
  category          String
  
  // Template content
  template          String    @db.Text
  variables         Json      // variable definitions
  examples          Json?     // example usages
  
  // Usage tracking
  usageCount        Int       @default(0)
  averageQuality    Float     @default(0)
  averageCost       Float     @default(0)
  
  // Metadata
  tags              String[]
  isPublic          Boolean   @default(false)
  createdBy         String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([category])
  @@index([isPublic, usageCount])
}

model PromptPreference {
  id                String    @id @default(cuid())
  userId            String
  
  // Optimization mode
  mode              OptimizationMode @default(BALANCED)
  
  // Custom weights (0-1)
  qualityWeight     Float     @default(0.4)
  costWeight        Float     @default(0.3)
  speedWeight       Float     @default(0.2)
  capabilityWeight  Float     @default(0.1)
  
  // Model preferences
  preferredProviders String[]
  blacklistedModels String[]
  
  // Budget settings
  maxCostPerMessage Float?
  maxCostPerDay     Float?
  maxCostPerMonth   Float?
  
  // Quality settings
  minQualityScore   Float     @default(0.7)
  autoImprove       Boolean   @default(true)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  
  @@unique([userId])
}

model ThreadAnalytics {
  id                String    @id @default(cuid())
  threadId          String    @unique
  
  // Cost metrics
  totalCost         Float     @default(0)
  costByProvider    Json      // { provider: cost }
  costByModel       Json      // { model: cost }
  savingsVsPremium  Float     @default(0)
  
  // Usage metrics
  totalTokens       Int       @default(0)
  promptTokens      Int       @default(0)
  completionTokens  Int       @default(0)
  messageCount      Int       @default(0)
  regenerationCount Int       @default(0)
  
  // Quality metrics
  averageQuality    Float     @default(0)
  satisfactionRate  Float     @default(0)
  overrideRate      Float     @default(0)
  
  // Performance metrics
  averageLatency    Int       @default(0) // milliseconds
  p95Latency        Int       @default(0)
  errorRate         Float     @default(0)
  
  // Model distribution
  modelUsage        Json      // { model: count }
  providerUsage     Json      // { provider: count }
  
  // Time metrics
  totalDuration     Int       @default(0) // seconds
  firstMessageAt    DateTime?
  lastMessageAt     DateTime?
  peakHour          Int?      // 0-23
  
  updatedAt         DateTime  @updatedAt
  
  thread            AIThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
}

model SessionMetrics {
  id                String    @id @default(cuid())
  sessionId         String    @unique
  userId            String
  
  // Session info
  startedAt         DateTime  @default(now())
  endedAt           DateTime?
  duration          Int?      // seconds
  
  // Usage metrics
  messageCount      Int       @default(0)
  threadCount       Int       @default(0)
  totalCost         Float     @default(0)
  totalTokens       Int       @default(0)
  
  // Model metrics
  modelsUsed        String[]
  providersUsed     String[]
  overrideCount     Int       @default(0)
  
  // Quality metrics
  averageQuality    Float     @default(0)
  regenerateCount   Int       @default(0)
  
  createdAt         DateTime  @default(now())
  
  @@index([userId, startedAt])
}

// Enums for AIOptimise
enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
  FUNCTION
}

enum MessageFeedback {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum ComplexityLevel {
  SIMPLE
  MODERATE
  COMPLEX
  EXPERT
}

enum ContentType {
  GENERAL
  CODE
  CREATIVE
  ANALYSIS
  RESEARCH
  TRANSLATION
  SUMMARIZATION
  CONVERSATION
}

enum OptimizationMode {
  QUALITY      // Always pick best quality
  BALANCED     // Balance quality and cost
  BUDGET       // Minimize cost
  SPEED        // Fastest response
  CUSTOM       // User-defined weights
}

// New Models for AIOptimise Pro

model MessageFeedbackRecord {
  id                String    @id @default(cuid())
  messageId         String
  userId            String
  type              FeedbackType
  comment           String?   @db.Text
  isHelpful         Boolean?
  suggestions       String?   @db.Text
  createdAt         DateTime  @default(now())
  
  message           AIMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id])
  
  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model ThreadCollaborator {
  id                String    @id @default(cuid())
  threadId          String
  userId            String
  role              CollaboratorRole @default(VIEWER)
  invitedBy         String
  invitedAt         DateTime  @default(now())
  acceptedAt        DateTime?
  lastViewedAt      DateTime?
  permissions       Json?     // Custom permissions
  
  thread            AIThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id])
  inviter           User      @relation("InvitedCollaborators", fields: [invitedBy], references: [id])
  
  @@unique([threadId, userId])
  @@index([threadId])
  @@index([userId])
}

model UserSettings {
  id                String    @id @default(cuid())
  userId            String    @unique
  
  // Display preferences
  theme             String    @default("system")
  chatMode          ChatMode  @default(STANDARD)
  showMetrics       Boolean   @default(true)
  showAnalysis      Boolean   @default(true)
  compactView       Boolean   @default(false)
  
  // Voice settings
  voiceEnabled      Boolean   @default(false)
  voiceLanguage     String    @default("en-US")
  voiceSpeed        Float     @default(1.0)
  autoPlayResponses Boolean   @default(false)
  
  // Auto features
  autoSaveThreads   Boolean   @default(true)
  autoGenerateTitle Boolean   @default(true)
  autoRetryOnError  Boolean   @default(true)
  maxRetries        Int       @default(3)
  
  // Model preferences
  preferredProvider String?
  preferredModel    String?
  alwaysShowOverride Boolean  @default(false)
  
  // Privacy
  shareDataForImprovement Boolean @default(false)
  allowTelemetry    Boolean   @default(true)
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
}

model VoiceSession {
  id                String    @id @default(cuid())
  userId            String
  threadId          String?
  messageId         String?
  
  // Recording data
  audioUrl          String?
  duration          Int       // milliseconds
  fileSize          Int?      // bytes
  mimeType          String    @default("audio/webm")
  
  // Transcription
  transcript        String?   @db.Text
  language          String?
  confidence        Float?
  provider          String    @default("whisper")
  
  // Status
  status            VoiceStatus @default(RECORDING)
  errorMessage      String?
  
  createdAt         DateTime  @default(now())
  completedAt       DateTime?
  
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([threadId])
  @@index([status])
}

model ImageUpload {
  id                String    @id @default(cuid())
  userId            String
  messageId         String?
  
  // File data
  url               String
  thumbnailUrl      String?
  fileName          String
  fileSize          Int       // bytes
  mimeType          String
  width             Int?
  height            Int?
  
  // Processing
  status            ProcessingStatus @default(UPLOADING)
  processingProgress Float    @default(0)
  analysisResult    Json?     // AI vision analysis
  extractedText     String?   @db.Text
  
  createdAt         DateTime  @default(now())
  processedAt       DateTime?
  
  user              User      @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([messageId])
  @@index([status])
}

model ThreadPresence {
  id                String    @id @default(cuid())
  threadId          String
  userId            String
  socketId          String?
  status            String    @default("active") // active, idle, typing
  cursorPosition    Json?
  lastSeen          DateTime  @default(now())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  thread            AIThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([threadId, userId])
  @@index([threadId])
  @@index([socketId])
  @@index([threadId, status])
}

model UsageLimit {
  id                String    @id @default(cuid())
  userId            String?
  organizationId    String?
  
  // Limits
  dailyTokenLimit   Int?
  monthlyTokenLimit Int?
  dailyCostLimit    Float?
  monthlyCostLimit  Float?
  concurrentThreads Int       @default(10)
  maxThreadMessages Int       @default(100)
  
  // Current usage
  dailyTokensUsed   Int       @default(0)
  monthlyTokensUsed Int       @default(0)
  dailyCostUsed     Float     @default(0)
  monthlyCostUsed   Float     @default(0)
  
  // Requests
  limitIncreaseRequested Boolean @default(false)
  requestedAt       DateTime?
  requestReason     String?   @db.Text
  approvedAt        DateTime?
  approvedBy        String?
  
  resetAt           DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User?     @relation(fields: [userId], references: [id])
  organization      Organization? @relation(fields: [organizationId], references: [id])
  
  @@unique([userId])
  @@unique([organizationId])
}

model AuditLog {
  id                String    @id @default(cuid())
  action            String    // Login, API access, data export, etc.
  severity          String    // LOW, MEDIUM, HIGH, CRITICAL
  userId            String?
  targetId          String?
  targetType        String?   // User, Thread, ApiKey, etc.
  metadata          Json?     // Additional context
  ipAddress         String?
  userAgent         String?
  success           Boolean   @default(true)
  errorMessage      String?
  createdAt         DateTime  @default(now())
  
  user              User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([severity])
  @@index([createdAt])
  @@index([targetId, targetType])
}

// New Enums

enum MessageStatus {
  SENDING
  SENT
  PROCESSING
  STREAMING
  COMPLETED
  FAILED
  CANCELLED
}

enum FeedbackType {
  THUMBS_UP
  THUMBS_DOWN
  REPORT
  SUGGESTION
}

enum CollaboratorRole {
  VIEWER
  COMMENTER
  EDITOR
  ADMIN
}

enum ChatMode {
  STANDARD
  FOCUS       // Distraction-free
  CODING      // Code-optimized
  RESEARCH    // Research mode
  CREATIVE    // Creative writing
  CUSTOM      // User-defined
}

enum ThreadType {
  STANDARD    // Regular conversation
  DIRECT      // Direct message (1:1)
  CHANNEL     // Team/topic-based
  HUDDLE      // Collaborative session
  EXTERNAL    // With external users
  PROJECT     // Project-specific thread
}

enum VoiceStatus {
  RECORDING
  PROCESSING
  TRANSCRIBING
  COMPLETED
  FAILED
}

enum ProcessingStatus {
  UPLOADING
  PROCESSING
  ANALYZING
  COMPLETED
  FAILED
}

// Role and Permission models for organization management
model Role {
  id             String       @id @default(cuid())
  name           String
  description    String?
  isSystem       Boolean      @default(false) // System roles cannot be deleted
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  permissions    Permission[]
  users          User[]       @relation("UserRoles")
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([organizationId, name])
  @@index([organizationId])
}

model Permission {
  id             String       @id @default(cuid())
  resource       String       // e.g., "users", "billing", "api_keys", "roles"
  action         String       // e.g., "read", "write", "delete"
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  roles          Role[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([organizationId, resource, action])
  @@index([organizationId])
}
// Alert Rules and Active Alerts
model AlertRule {
  id             String       @id @default(cuid())
  name           String
  type           String       // cost, usage, anomaly, quota, security, compliance
  severity       String       // low, medium, high, critical
  status         String       @default("active") // active, paused, triggered
  threshold      Float
  condition      String       // exceeds, below, equals, change_percent
  timeframe      String       // hourly, daily, weekly, monthly
  description    String?
  channels       String[]     @default(["email"]) // email, slack, webhook
  triggerCount   Int          @default(0)
  lastTriggered  DateTime?
  
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  createdById    String
  createdBy      User         @relation(fields: [createdById], references: [id])
  
  activeAlerts   ActiveAlert[]
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([organizationId])
  @@index([createdById])
}

model ActiveAlert {
  id             String       @id @default(cuid())
  ruleId         String
  rule           AlertRule    @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  
  type           String       // Same as rule type
  severity       String       // Same as rule severity
  message        String
  currentValue   Float
  threshold      Float
  
  acknowledged   Boolean      @default(false)
  acknowledgedBy String?
  acknowledgedAt DateTime?
  
  escalated      Boolean      @default(false)
  escalatedAt    DateTime?
  
  resolved       Boolean      @default(false)
  resolvedAt     DateTime?
  
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  triggeredAt    DateTime     @default(now())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@index([organizationId])
  @@index([ruleId])
  @@index([resolved, acknowledged])
}

// AIOptimise Thread and Message Models
model Thread {
  id             String   @id @default(cuid())
  title          String
  userId         String
  organizationId String?
  mode           String   @default("focus") // focus, coding, creative, analysis
  status         String   @default("active") // active, archived, shared
  isPinned       Boolean  @default(false)
  metadata       Json?    // Store additional settings, participants, etc.
  
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization? @relation(fields: [organizationId], references: [id])
  messages       Message[]
  participants   ThreadParticipant[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastMessageAt  DateTime?
  
  @@index([userId])
  @@index([organizationId])
  @@index([status])
  @@index([lastMessageAt])
}

model Message {
  id             String   @id @default(cuid())
  threadId       String
  userId         String?  // null for AI messages
  role           String   // user, assistant, system
  content        String   @db.Text
  model          String?  // AI model used
  provider       String?  // AI provider
  
  // Token and cost tracking
  promptTokens   Int?
  completionTokens Int?
  totalTokens    Int?
  cost           Float?
  latency        Int?     // Response time in ms
  
  // Attachments and metadata
  attachments    Json?    // Array of attachment objects
  metadata       Json?    // Temperature, maxTokens, etc.
  feedback       String?  // positive, negative, null
  error          String?
  status         String   @default("complete") // sending, processing, streaming, complete, error
  
  thread         Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user           User?    @relation(fields: [userId], references: [id])
  
  createdAt      DateTime @default(now())
  editedAt       DateTime?
  
  @@index([threadId])
  @@index([userId])
  @@index([createdAt])
}

model ThreadParticipant {
  id             String   @id @default(cuid())
  threadId       String
  userId         String
  role           String   @default("viewer") // owner, admin, editor, viewer
  joinedAt       DateTime @default(now())
  lastSeenAt     DateTime?
  isTyping       Boolean  @default(false)
  
  thread         Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([threadId, userId])
  @@index([threadId])
  @@index([userId])
}

model Attachment {
  id             String   @id @default(cuid())
  messageId      String?
  userId         String
  filename       String
  mimeType       String
  size           Int
  url            String
  storageKey     String?  // S3 key or local path
  
  user           User     @relation(fields: [userId], references: [id])
  
  createdAt      DateTime @default(now())
  
  @@index([messageId])
  @@index([userId])
}

// AI Model Performance Tracking
model ModelPerformance {
  id             String   @id @default(cuid())
  userId         String
  model          String
  taskType       String
  latency        Int      // in milliseconds
  cost           Float
  success        Boolean
  userRating     Int?     // 1-5 scale
  errorMessage   String?
  
  user           User     @relation(fields: [userId], references: [id])
  timestamp      DateTime @default(now())
  
  @@index([userId, model])
  @@index([userId, taskType])
  @@index([timestamp])
}

// Cost Predictions
model CostPrediction {
  id             String   @id @default(cuid())
  userId         String
  organizationId String?
  period         String   // daily, weekly, monthly
  predictedCost  Float
  confidence     Float    // 0-1
  basedOnDays    Int      // Number of days used for prediction
  features       Json     // ML features used
  
  user           User     @relation(fields: [userId], references: [id])
  organization   Organization? @relation(fields: [organizationId], references: [id])
  
  createdAt      DateTime @default(now())
  
  @@index([userId, period])
  @@index([organizationId, period])
  @@index([createdAt])
}

// Collaborative Thread Context System
model ThreadContext {
  id                String    @id @default(cuid())
  threadId          String    @unique

  // Core Project Settings
  projectName       String?   // Optional project name (can differ from thread title)
  projectType       ProjectType @default(GENERAL)
  systemPrompt      String?   @db.Text // Editable system prompt
  instructions      String?   @db.Text // Project instructions/guidelines

  // AI Behavior Configuration
  defaultModel      String?   @default("gpt-4o-mini")
  defaultProvider   String?   @default("openai")
  temperature       Float?    @default(0.7)
  maxTokens         Int?      @default(4000)
  topP              Float?    @default(1.0)

  // Context Management
  contextWindow     Int?      @default(8000)
  memoryEnabled     Boolean   @default(true)
  memorySize        Int?      @default(50) // Number of messages to remember

  // Collaboration Settings
  allowEditing      Boolean   @default(true)  // Can collaborators edit context?
  requireApproval   Boolean   @default(false) // Require approval for context changes?

  // Project Metadata
  category          String?   // e.g., "Development", "Research", "Content"
  keywords          String[]  @default([])
  projectGoals      String?   @db.Text
  expectedOutcome   String?   @db.Text

  // Versioning
  version           Int       @default(1)
  lastEditedBy      String?
  lastEditedAt      DateTime?

  // Template Support
  isTemplate        Boolean   @default(false)
  templateName      String?
  templateCategory  String?
  usageCount        Int       @default(0) // If template, track usage

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  thread            AIThread  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  lastEditor        User?     @relation("ThreadContextEditor", fields: [lastEditedBy], references: [id])

  @@index([threadId])
  @@index([projectType])
  @@index([isTemplate, templateCategory])
  @@index([category])
}

// New Enums for Collaborative Features
enum ProjectType {
  GENERAL          // General conversation
  DEVELOPMENT      // Software development
  RESEARCH         // Research project
  CONTENT_CREATION // Content/writing
  ANALYSIS         // Data analysis
  BRAINSTORMING    // Ideation session
  SUPPORT          // Customer support
  TRAINING         // Training/education
  ASSETWORKS_AI    // AssetWorks AI Financial Analytics Platform
  CUSTOM           // Custom project type
}

model OrganizationSettings {
  id                String    @id @default(cuid())
  organizationId    String    @unique

  // Admin override settings for project configuration
  adminOverrides    Json?     // Stores the overridden project settings as JSON
  overrideReason    String?   // Reason for the admin override
  overriddenBy      String?   // User ID who applied the override
  overriddenAt      DateTime? // When the override was applied
  recommendationId  String?   // If override came from a recommendation

  // Change request tracking
  pendingRequests   Json?     // Array of pending change requests from users

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  overriddenByUser  User?        @relation("AdminOverrides", fields: [overriddenBy], references: [id])

  @@index([organizationId])
  @@index([overriddenBy])
}

// Messaging System Models for Organizational Communication

model MessagingChannel {
  id              String    @id @default(cuid())
  name            String    // Channel name (e.g., "general", "ai-discussions")
  description     String?   @db.Text
  type            MessagingChannelType @default(PUBLIC)
  organizationId  String
  createdById     String

  // Channel settings
  isArchived      Boolean   @default(false)
  isPinned        Boolean   @default(false)
  isPrivate       Boolean   @default(false)
  allowThreads    Boolean   @default(true)

  // Metadata
  topic           String?   @db.Text
  lastMessageAt   DateTime?
  messageCount    Int       @default(0)
  memberCount     Int       @default(0)

  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy       User         @relation("ChannelCreator", fields: [createdById], references: [id])
  members         ChannelMember[]
  messages        MessagingMessage[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([createdById])
  @@index([type, isArchived])
}

model ChannelMember {
  id              String    @id @default(cuid())
  channelId       String
  userId          String
  role            ChannelRole @default(MEMBER)

  // Membership settings
  isAdmin         Boolean   @default(false)
  isMuted         Boolean   @default(false)
  notificationsEnabled Boolean @default(true)

  // Activity tracking
  joinedAt        DateTime  @default(now())
  lastReadAt      DateTime?
  lastActiveAt    DateTime?
  unreadCount     Int       @default(0)

  channel         MessagingChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user            User             @relation("ChannelMemberships", fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([channelId, userId])
  @@index([channelId])
  @@index([userId])
  @@index([userId, unreadCount])
}

model MessagingMessage {
  id              String    @id @default(cuid())
  channelId       String?   // null for direct messages
  senderId        String
  recipientId     String?   // for direct messages
  threadId        String?   // for threaded messages
  parentMessageId String?   // for replies

  // Message content
  content         String    @db.Text
  type            MessageType @default(TEXT)

  // Message metadata
  isEdited        Boolean   @default(false)
  editedAt        DateTime?
  isDeleted       Boolean   @default(false)
  deletedAt       DateTime?
  deletedBy       String?

  // Attachments and formatting
  attachments     Json?     // Array of file attachments
  mentions        String[]  @default([]) // Array of user IDs mentioned
  formatting      Json?     // Rich text formatting data

  // Thread/Reply metadata
  replyCount      Int       @default(0)
  lastReplyAt     DateTime?

  // Reactions and engagement
  reactions       Json?     // { emoji: [userId] }

  channel         MessagingChannel? @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender          User              @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  recipient       User?             @relation("ReceivedMessages", fields: [recipientId], references: [id], onDelete: Cascade)
  parentMessage   MessagingMessage? @relation("MessageReplies", fields: [parentMessageId], references: [id], onDelete: Cascade)
  replies         MessagingMessage[] @relation("MessageReplies")
  reactions_rel   MessageReaction[]
  deliveryStatuses MessageDeliveryStatus[] @relation("MessageDelivery")

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([channelId, createdAt])
  @@index([senderId])
  @@index([recipientId])
  @@index([threadId])
  @@index([parentMessageId])
  @@index([channelId, senderId, createdAt]) // For channel message history
  @@index([senderId, recipientId, createdAt]) // For direct message history
}

model MessageReaction {
  id              String    @id @default(cuid())
  messageId       String
  userId          String
  emoji           String    // Unicode emoji or custom emoji ID

  message         MessagingMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user            User             @relation("MessageReactions", fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())

  @@unique([messageId, userId, emoji])
  @@index([messageId])
  @@index([userId])
}

model DirectMessageThread {
  id              String    @id @default(cuid())
  participant1Id  String
  participant2Id  String
  organizationId  String

  // Thread metadata
  lastMessageAt   DateTime?
  messageCount    Int       @default(0)
  isArchived      Boolean   @default(false)

  // Participant settings
  participant1Muted Boolean @default(false)
  participant2Muted Boolean @default(false)
  participant1UnreadCount Int @default(0)
  participant2UnreadCount Int @default(0)

  participant1    User         @relation("DMParticipant1", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2    User         @relation("DMParticipant2", fields: [participant2Id], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([participant1Id, participant2Id, organizationId])
  @@index([organizationId])
  @@index([participant1Id])
  @@index([participant2Id])
  @@index([lastMessageAt])
}

model MessageDeliveryStatus {
  id              String    @id @default(cuid())
  messageId       String
  userId          String
  status          DeliveryStatus @default(SENT)

  // Delivery tracking
  deliveredAt     DateTime?
  readAt          DateTime?

  message         MessagingMessage @relation("MessageDelivery", fields: [messageId], references: [id], onDelete: Cascade)
  user            User             @relation("MessageDeliveries", fields: [userId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@index([status])
}

// Messaging System Enums

enum MessagingChannelType {
  PUBLIC
  PRIVATE
  DIRECT
  ANNOUNCEMENT
}

enum ChannelRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  VIDEO
  AUDIO
  SYSTEM
  NOTIFICATION
}

enum DeliveryStatus {
  SENT
  DELIVERED
  READ
  FAILED
}

model IntegrationConfig {
  id             String    @id @default(cuid())
  provider       String    // e.g., "SLACK", "DISCORD", "TEAMS"
  config         Json      // JSON configuration for the integration
  isActive       Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastSyncAt     DateTime?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String

  @@unique([organizationId, provider])
  @@index([organizationId])
}

// New Models for Slack-like Features

model MessageDraft {
  id              String    @id @default(cuid())
  userId          String
  threadId        String?   // Optional - drafts can exist without threads
  content         String    @db.Text
  attachments     Json?     // File/image attachments
  selectedModel   String?
  selectedProvider String?
  reminderAt      DateTime? // For draft reminders
  isReminded      Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread          AIThread? @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt])
  @@index([userId, threadId])
  @@index([reminderAt])
}

model AIContextMemory {
  id              String    @id @default(cuid())
  userId          String
  organizationId  String?
  sourceThreadId  String    // Original thread
  relatedThreadIds String[] // Connected threads
  keywords        String[]  // Extracted keywords
  topics          String[]  // Identified topics
  entities        String[]  // Named entities (people, places, concepts)
  contextSummary  String    @db.Text // AI-generated summary
  memoryStrength  Float     @default(1.0) // Relevance/importance score
  lastAccessedAt  DateTime  @default(now())
  createdAt       DateTime  @default(now())

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization? @relation(fields: [organizationId], references: [id])
  sourceThread    AIThread  @relation("SourceMemory", fields: [sourceThreadId], references: [id], onDelete: Cascade)

  @@index([userId, memoryStrength])
  @@index([organizationId, lastAccessedAt])
  @@index([keywords])
  @@index([topics])
}

model UserStarredThread {
  id        String   @id @default(cuid())
  userId    String
  threadId  String
  starredAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  thread    AIThread @relation("StarredThreads", fields: [threadId], references: [id], onDelete: Cascade)

  @@unique([userId, threadId])
  @@index([userId, starredAt])
}

// Thread Replies System (Slack-like threading)
model ThreadReply {
  id          String   @id @default(cuid())
  threadId    String
  parentId    String?  // For nested replies
  userId      String
  content     String   @db.Text
  isEdited    Boolean  @default(false)
  mentions    String[] // User IDs mentioned in the reply
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  thread      AIThread @relation("ThreadReplies", fields: [threadId], references: [id], onDelete: Cascade)
  user        User     @relation("ThreadReplies", fields: [userId], references: [id], onDelete: Cascade)
  parent      ThreadReply? @relation("NestedReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies     ThreadReply[] @relation("NestedReplies")
  reactions   ReplyReaction[]
  attachments ReplyAttachment[]

  @@index([threadId, createdAt])
  @@index([userId, createdAt])
  @@index([parentId])
}

// Reactions on thread replies
model ReplyReaction {
  id      String @id @default(cuid())
  replyId String
  userId  String
  emoji   String
  createdAt DateTime @default(now())

  reply   ThreadReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user    User        @relation("ReplyReactions", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId, emoji])
  @@index([replyId])
  @@index([userId])
}

// Attachments for thread replies
model ReplyAttachment {
  id       String @id @default(cuid())
  replyId  String
  type     String // 'image', 'file', 'code'
  name     String
  url      String
  size     Int
  mimeType String?
  createdAt DateTime @default(now())

  reply    ThreadReply @relation(fields: [replyId], references: [id], onDelete: Cascade)

  @@index([replyId])
}

// Huddles System
model Huddle {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  isActive    Boolean  @default(true)
  isLive      Boolean  @default(false)
  isRecording Boolean  @default(false)
  startedAt   DateTime?
  endedAt     DateTime?
  createdBy   String
  threadId    String?  @unique  // Optional connection to AIThread
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator     User               @relation("CreatedHuddles", fields: [createdBy], references: [id])
  participants HuddleParticipant[]
  thread      AIThread?          @relation("HuddleThread", fields: [threadId], references: [id])

  @@index([createdBy, createdAt])
  @@index([isActive, isLive])
}

model HuddleParticipant {
  id       String @id @default(cuid())
  huddleId String
  userId   String
  role     String @default("participant") // 'host', 'participant'
  isMuted  Boolean @default(false)
  isVideoOn Boolean @default(true)
  joinedAt DateTime @default(now())
  leftAt   DateTime?

  huddle   Huddle @relation(fields: [huddleId], references: [id], onDelete: Cascade)
  user     User   @relation("HuddleParticipants", fields: [userId], references: [id])

  @@unique([huddleId, userId])
  @@index([huddleId])
  @@index([userId])
}

